import logging
import states
import os
import google_sheets
import re
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
from dotenv import load_dotenv

load_dotenv()
OSA_TABLE = os.getenv('OSA_TABLE')
logger = logging.getLogger(__name__)


def send_again(update: Update):
    update.message.reply_text(
        '–î–∞–Ω—ñ –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. '
        '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ '
        'üôè‚§µÔ∏è'
        # reply_markup=ReplyKeyboardMarkup(
        #     reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        # )
    )


def send_to_start(update: Update):
    reply_keyboard = [['‚úã –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞']]

    update.message.reply_text(
        '–û–±–∏—Ä–∞–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ ‚§µÔ∏è',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        )
    )


def region(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['üõ° –†–µ—á—ñ –¥–ª—è –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤'],
                      ['üç≤ –û–±—ñ–¥–∏'],
                      ['üíä –õ—ñ–∫–∏ / –∑–∞—Å–æ–±–∏ –≥—ñ–≥—ñ—î–Ω–∏'],
                      ['üõí –ì—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ (—ó–∂–∞, —Ä–µ—á—ñ)'],
                      ['üìñ –Ü–Ω—à–µ'],
                      ['‚ùå –í—ñ–¥–º—ñ–Ω–∞']
                      ]
    user = update.message.from_user
    text = update.message.text
    context.user_data['region'] = text
    logger.info("Gender of %s: %s", user.first_name, update.message.text)
    update.message.reply_text(
        '–û–±–µ—Ä—ñ—Ç—å —è–∫–∞ '
        '–¥–æ–ø–æ–º–æ–≥–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ ‚§µÔ∏è',
         reply_markup=ReplyKeyboardMarkup(
             reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        )
    )

    return states.HELP_TYPE


def help_type(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['‚ùå –í—ñ–¥–º—ñ–Ω–∞']]
    text = update.message.text
    if text == '‚ùå –í—ñ–¥–º—ñ–Ω–∞':
        send_to_start(update)
        return states.REQUEST
    context.user_data['table_id'] = OSA_TABLE
    context.user_data['help_type'] = text
    logger.info("Text is: %s", text)
    if text == 'üìñ –Ü–Ω—à–µ':
        update.message.reply_text(
            '–û–ø–∏—à—ñ—Ç—å –¥–æ–∫–ª–∞–¥–Ω–æ —è–∫–∞ '
            '–¥–æ–ø–æ–º–æ–≥–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ ‚§µÔ∏è',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            )
        )
    elif text == 'üç≤ –û–±—ñ–¥–∏':
        update.message.reply_text(
            '–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å '
            '–æ–±—ñ–¥—ñ–≤ ‚§µÔ∏è',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            )
        )
    else:
        update.message.reply_text(
            '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É '
            '—Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚§µÔ∏è',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            )
        )

    return states.HELP

def help(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    if text == '‚ùå –í—ñ–¥–º—ñ–Ω–∞':
        send_to_start(update)
        return states.REQUEST
    context.user_data['help'] = text
    logger.info("Text is: %s", text)
    update.message.reply_text(
        '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è '
        '—Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ ‚§µÔ∏è',
    )

    return states.NAME

def name(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    if text == '‚ùå –í—ñ–¥–º—ñ–Ω–∞':
        send_to_start(update)
        return states.REQUEST
    if validate_name(text) is None:
        send_again(update)
        return states.NAME
    logger.info("Text is: %s", text)
    context.user_data['name'] = text
    update.message.reply_text(
        '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä '
        '—Ç–µ–ª–µ—Ñ–æ–Ω—É ‚§µÔ∏è'
    )

    return states.PHONE

def phone(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    if text == '‚ùå –í—ñ–¥–º—ñ–Ω–∞':
        send_to_start(update)
        return states.REQUEST
    if validate_phone(text) is None:
        send_again(update)
        return states.PHONE
    logger.info("Text is: %s", text)
    context.user_data['phone'] = text
    update.message.reply_text(
        '–ù–∞–ø–∏—à—ñ—Ç—å –∞–¥—Ä–µ—Å—É, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ ‚§µÔ∏è',
    )

    return states.ADDRESS


def address(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    if text == '‚ùå –í—ñ–¥–º—ñ–Ω–∞':
        send_to_start(update)
        return states.REQUEST
    if validate_address(text) is None:
        send_again(update)
        return states.ADDRESS
    logger.info("Text is: %s", text)
    context.user_data['address'] = text
    sheets = google_sheets.Sheets(context.user_data['help_type'], context.user_data['table_id'])
    sheets.add_all(context.user_data)
    update.message.reply_text(
        """–ú–∏ –∑–∞–ø–∏—Å–∞–ª–∏ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞. –ü–æ—Å—Ç–∞—Ä–∞—î–º–æ—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —è–∫–æ–º–æ–≥–∞ —Å–∫–æ—Ä—ñ—à–µ üôè. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —è–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç.""",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def validate_name(text:str):
    return re.fullmatch("^[–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î º ,.'-]+$", text)

def validate_address(text:str):
    return re.fullmatch("^[–ê-–Ø–∞-—è0-9–Å—ë–á—ó–Ü—ñ–Ñ—î º ,.'-/]+$", text)

def validate_phone(text:str):
    return re.fullmatch("^[0-9+]+$", text)